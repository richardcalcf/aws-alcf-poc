Parameters:
  VPCName:
    Type: 'String'
    Description: 'Please provide an appropriate name for the VPC.'
  
  EnvSize:
    Type: "String"
    Default: "SMALL"
    AllowedValues:
      - "SMALL"
      - "MEDIUM"
      - "LARGE"
    Description: "Select an instance size (small, medium, large)"

Mappings:
  EnvironmentSize:
    SMALL:
      "EC2": "t2.micro"
      "DB": "db.t2.micro"
    MEDIUM:
      "EC2": "t2.small"
      "DB": "db.t2.small"
    LARGE:
      "EC2": "t2.medium"
      "DB": "db.t2.medium"
  RegionMaps:
    us-east-1: 
      MachineImage: "ami-14c5486b" # Amazon Linux March 2018
    us-east-2:
      MachineImage: "ami-922914f7" # Amazon Linux March 2018
    us-west-1:
      MachineImage: "ami-25110f45" # Amazon Linux March 2018
    us-west-2:
      MachineImage: "ami-e251209a" # Amazon Linux March 2018  

Resources:
  VPCRICHC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      InstanceTenancy: 'default'
      Tags:
      -  Key: 'Name'
         Value: 'VPCRICHC'

#Public Subnet
  SUBRICHC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '10.0.1.0/24'
      VpcId: !Ref VPCRICHC
      MapPublicIpOnLaunch: False
      Tags:
      -  Key: 'Name'
         Value: 'Public Subnet'

#Private Subnet
  SUBRICHC2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref VPCRICHC
      Tags:
      -  Key: 'Name'
         Value: 'Private Subnet'

#NAT Elastic IP
  NATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPCRICHC
    DependsOn: VPCRICHC

#NAT Gateway
  NATGW:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref SUBRICHC

  IGWRICHC:
    Type: 'AWS::EC2::InternetGateway'
    Properties: 
      Tags:
      - Key: 'Name'
        Value: 'IGWRICHC'

  
  ATTACHIGWRICHC:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPCRICHC
      InternetGatewayId: !Ref IGWRICHC  

  EC2RICHC1:
    Type:  "AWS::EC2::Instance"
    Properties:
      ImageId:  !FindInMap ["RegionMaps", !Ref "AWS::Region", "MachineImage"]
      InstanceType:  !FindInMap [EnvironmentSize, !Ref EnvSize, "EC2"]
      # NEW Key/value pairs of KeyName, UserData and two functions Base64 and Sub
      KeyName:  'AdvancedCFN'
      SubnetId: !Ref SUBRICHC
      SecurityGroupIds:
      - !Ref SGRICHC
      Tags:
      - Key: 'Name'
        Value: 'Public Web Server'
      UserData: 
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum install httpd -y
            yum update -y
            service httpd start
            chkconfig httpd on
            echo "<html><h1>Hello Cloud Architects!</h1></html>" > /var/www/html/index.html
    DependsOn: SGRICHC

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2RICHC1

  EC2RICHC2:
    Type:  "AWS::EC2::Instance"
    Properties:
      ImageId:  !FindInMap ["RegionMaps", !Ref "AWS::Region", "MachineImage"]
      InstanceType:  !FindInMap [EnvironmentSize, !Ref EnvSize, "EC2"]
      # NEW Key/value pairs of KeyName, UserData and two functions Base64 and Sub
      KeyName:  'AdvancedCFN'
      SubnetId: !Ref SUBRICHC2
      SecurityGroupIds:
      - !Ref SGRICHC
      Tags:
      - Key: 'Name'
        Value: 'Private Web Server'
      UserData: 
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum install httpd -y
            yum update -y
            service httpd start
            chkconfig httpd on
            echo "<html><h1>Hello Cloud Architects!</h1></html>" > /var/www/html/index.html
    DependsOn: SGRICHC

  TableRICHC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCRICHC
      Tags:
      - Key: Name
        Value: 'Public Route Table for Public Subnet'

  myRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWRICHC
    Properties:
      RouteTableId: !Ref TableRICHC
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGWRICHC

  PrivateTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCRICHC
      Tags:
      - Key: Name
        Value: 'Private Route Table for Private Subnet'

#  privateRoute:
#    Type: AWS::EC2::Route
#    DependsOn: NATGW
#    Properties:
#      RouteTableId: !Ref PrivateTable
#      DestinationCidrBlock: 0.0.0.0/0
#      GatewayId: !Ref NATGW

  SUBASSOCRICHC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref TableRICHC
      SubnetId: !Ref SUBRICHC
    
  PRIVSUBASSOCRICHC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateTable
      SubnetId: !Ref SUBRICHC2

  SGRICHC:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'WebDMZ'
      GroupDescription: 'HTTP Access for both ingress and egress traffic'
      VpcId: !Ref VPCRICHC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 76.105.143.97/32  
      SecurityGroupEgress:
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
# End of code